write.csv(result, "quantmod_stocks.csv")
nrow(result)
devtools::install_github("cran/quantstrat")
devtools::install_github("fandres70/quantstrat")
install.packages("FinancialInstrument", repos="http://R-Forge.R-project.org")
install.packages("blotter", repos="http://R-Forge.R-project.org")
devtools::install_version("blotter", "3.3.3")
install.packages("FinancialInstrument", dependencies=TRUE, repos='http://cran.rstudio.com/'))
install.packages("FinancialInstrument", dependencies=TRUE, repos='http://cran.rstudio.com/')
install.packages("blotter", dependencies=TRUE, repos='http://cran.rstudio.com/')
install_github("braverock/blotter")
devtools::install_github("braverock/blotter")
library(devtools)
install_github("joshuaulrich/xts")
detach("package:quantmod", unload=TRUE)
install_github("joshuaulrich/xts")
install_github("joshuaulrich/xts", force=TRUE)
devtools::install_github("braverock/blotter")
devtools::install_github("fandres70/quantstrat")
install_github("braverock/quantstrat")
library(devtools)
install_github("braverock/quantstrat")
head(read.csv("~/Desktop/VLDB/quantmod_stocks.csv"))
d <- read.csv("~/Desktop/VLDB/quantmod_stocks.csv")
d[-1,]
d <- d[-1,]
names(d)
d <- read.csv("~/Desktop/VLDB/quantmod_stocks.csv")
head(d[1])
head(d[1,])
head(d[,1])
d[,1]
d[,-1]
d <- d[,-1]
names(d)
d[,c(7, 1:6, 8)]
d[,c(7, 8, 1:6)]
d <- d[,c(7, 1:6, 8)]
write.csv(d, "~/Desktop/VLDB/quantmod_stocks.csv")
head(read.csv("~/Desktop/VLDB/quantmod_stocks.csv"))
write.csv(d, "~/Desktop/VLDB/quantmod_stocks.csv", row.names = FALSE)
head(read.csv("~/Desktop/VLDB/quantmod_stocks.csv"))
rm(d)
d <- read.csv("~/Desktop/VLDB/quantmod_stocks.csv")
head(d)
d$id <- 1:nrow(d)
head(d[,c(8, 7, 1:6)])
head(d)
head(d[,c(9, 1:7)])
d <- d[,c(9, 1:7)]
write.csv(d, "~/Desktop/VLDB/quantmod_stocks.csv", row.names = FALSE)
head(read.csv("~/Desktop/VLDB/quantmod_stocks.csv"))
write.csv(d, "~/Desktop/VLDB/quantmod_stocks.csv", quote = FALSE, row.names = FALSE)
head(read.csv("~/Desktop/VLDB/quantmod_stocks.csv"))
d <- read.csv("~/Desktop/VLDB/quantmod_stocks.csv")
head(d)
results
result
result <- do.call(rbind, lapply(tickers, function(x) {
getStock(x, start_date = "2014-07-01", end_date = "2017-07-01")
})
)
tickers_FTSE100 <- htmltab::htmltab("https://en.wikipedia.org/wiki/FTSE_100_Index", 3)$Ticker
tickers_all <- stockSymbols()
library(quantmod)
tickers_all <- stockSymbols()
tickers <- tickers_FTSE100[tickers_FTSE100 %in% tickers_all$Symbol]
tickers
getStock <- function(ticker, start_date, end_date) {
dat <- try(getSymbols(ticker, auto.assign=FALSE, from = start_date, to = end_date), silent=T)
if(class(dat)[1]=="xts") {
#rename columns
nn <- unlist(strsplit(names(dat), '[.]'))
nn <- nn[c(2,4,6,8,10,12)]
names(dat) <- nn
#convert to df
df <- data.frame(dat)
df$date = as.Date(rownames(df))
#add company name
df <- df %>%
mutate(company = ticker)
return(df)
}
return (NULL)
}
result <- do.call(rbind, lapply(tickers, function(x) {
getStock(x, start_date = "2014-07-01", end_date = "2017-07-01")
})
)
library(dplyr)
result <- do.call(rbind, lapply(tickers, function(x) {
getStock(x, start_date = "2014-07-01", end_date = "2017-07-01")
})
)
head(result)
d$id <- 1:nrow(d)
d[,c(9, 7, 8, 1:6)]
d <- result
d[,c(9, 7, 8, 1:6)]
names(d)
d$id <- 1:nrow(d)
d[,c(9, 7, 8, 1:6)]
d <- d[,c(9, 7, 8, 1:6)]
head(d)
write.csv(d, "quantmod_stocks.csv", quote=FALSE, row.names=FALSE)
head(read.csv("~/Desktop/VLDB/quantmod_stocks.csv"))
head(d)
write.csv(d, "quantmod_stocks.csv", quote=FALSE, row.names=FALSE)
head(read.csv("~/Desktop/VLDB/quantmod_stocks.csv"))
write.csv(d, "quantmod_stocks.csv", row.names=FALSE)
head(read.csv("~/Desktop/VLDB/quantmod_stocks.csv"))
head(d)
write.csv(d, "~/Desktop/VLDB/quantmod_stocks.csv", quote=FALSE, row.names=FALSE)
head(read.csv("~/Desktop/VLDB/quantmod_stocks.csv"))
d[2776,]
d[2775:2777,]
install.packages("RPostgreSQL")
rm(list=ls())
library(RPostgreSQL)
pg = dbDriver("PostgreSQL")
con = dbConnect(pg, user="postgres", password="postgres",
host="localhost", port=5432, dbname="staging")
con = dbConnect(pg, user="postgres", password="postgres",
host="localhost", port=5432, dbname="finance")
dbWriteTable(con, 'fund_price', fund_price, row.names=FALSE)
dbWriteTable(con, 'staging', staging, row.names=FALSE)
con
summary(con)
con = dbConnect(pg, user="postgres", password="postgres",
host="localhost", port=5432, dbname="mydb")
dbWriteTable(con, 'staging', staging, row.names=FALSE)
dbWriteTable(con, 'finance', staging, row.names=FALSE)
dbWriteTable(con, 'finance', finance, row.names=FALSE)
dbWriteTable(con, 'finance', row_counts, row.names=FALSE)
dbWriteTable(con, 'finance', row_count, row.names=FALSE)
summary(dtab)
library(purrr)
map_dbl(., "r.squared")
mtcars ->,;
split(., .$cyl) ->,;
map(., ~lm(mpg ~ wt, data = .)) ->,;
map(., summary)
mtcars ->,;
split(., .$cyl)
mtcars ->.;
split(., .$cyl) ->.;
map(., ~lm(mpg ~ wt, data = .)) ->.;
map(., summary) ->.;
map_dbl(., "r.squared")
map_dbl(., "r.squard")
mtcars ->.;
split(., .$cyl) ->.;
map(., ~lm(mpg ~ wt, data = .)) ->.;
map(., summary) ->.;
map_dbl(., "r.squard")
mtcars ->.;
split(., .$cyl) ->.;
map(., ~lm(mpg ~ wtg, data = .)) ->.;
map(., summary) ->.;
map_dbl(., "r.squared")
mydata <- data.frame(rnorm(10), rnorm(10), rnorm(10), rnorm(10), rnorm(10))
mydata
a <- rnorm(10)
b <- seq(1:10)
a
b
Map(function(x,y) y*b, a, b)
Map(function(x,y) y*x, a, b)
?Map
Sys.Date
Sys.Date()
rnorm(1,10)
rnorm(1,10, 10)
?rnorm
rnorm(10, 10)
data.frame(y = c(rnorm(10, 10), rnorm(10, 20), rnorm(10, 30))
)
data.frame(x = rep(1:3, by = 10), y = c(rnorm(10, 10), rnorm(10, 20), rnorm(10, 30)))
data.frame(x = rep(1:3, each = 10), y = c(rnorm(10, 10), rnorm(10, 20), rnorm(10, 30)))
data.frame(x = rep(1:3, each = 10), y = c(rnorm(10, 10), rnorm(10, 20), rnorm(10, 30)))
dat <- data.frame(x = rep(1:3, each = 10), y = c(rnorm(10, 10), rnorm(10, 20), rnorm(10, 30)))
dat
mydf <- data.frame(x = rep(1:3, each = 10), y = c(rnorm(10, 10), rnorm(10, 20), rnorm(10, 30)))
rm(dat)
mydf %>% group_by(x) %>% summarise(mean)
library(dplyr)
mydf %>% group_by(x) %>% summarise(mean)
mydf %>% group_by(x) %>% summarise(mean(y))
mydf %>% summarise(mean(y))
mydf %>% group_by(x) %>% summarise(mu = mean(y)) %>% summarise(mean(mu))
mean(mydf$y)
getwd()
setwd("~/Dropbox/github/quantdb/loading/")
read.csv("ticker_by_date.csv")
read.csv("ticker_by_date.csv", head=F)
read.csv("ticker_by_date.csv", header=F)
d <- read.csv("ticker_by_date.csv", header=F)
subset(d, V1 = "CGNT")
subset(d, V1 == "CGNT")
subset(d, V1 == "AAPL")
tickers
tickers <- as.character(read.table(args[1])$V1)
tickers <- read.table("../my_tickers.txt", head=T)
tickers
tickers <- read.table("../my_tickers.txt", head=F)
tickers <- read.table("../my_tickers.txt", head=F)
tickers <- read.table("../my_tickers.txt")
tickers
tickers <- as.character(read.table("../my_tickers.txt")$V1)
tickers
tickers <- c(tickers, "AAPL")
getSymbols()
library(quantmod)
getSymbols()
quantmod::getSymbols()
stockSymbols
stockSymbols()
subset(d, V1 == "BTX")
tickers <- as.character(read.table("../my_tickers.txt")$V1)
tickers <- c(tickers, "AAPL", "BTX")
tickers
getSymbolsDF <- function(tickers, from, to) {
result_list <- lapply(1:length(tickers), function(x) {
tryCatch({
tmp <- getSymbols(tickers[x], from = from[x], to = to, auto.assign = F)
data.frame(date = index(tmp),
ticker = x,
open = as.numeric(Op(tmp)),
high = as.numeric(Hi(tmp)),
close = as.numeric(Cl(tmp)),
volume = as.numeric(Vo(tmp)),
adj = as.numeric(Ad(tmp))
)
}, error = function(e) {
return(NULL)
})
})
result_df <- do.call(rbind, result_list)
return(result_df)
}
tickers
d
d[,1]
tickers %in% d[,1]
tickers[tickers %in% d[,1]]
tickers[tickers %in% d[,1]]
tickers_update <- tickers[tickers %in% d[,1]]
tickers_new <- tickers[! tickers %in% d[,1]]
tickers_new
current_date <- Sys.Date()
getSymbolsDF(tickers[1:5], from = d[1:5,2], to = current_date)
getSymbolsDF <- function(tickers, from, to) {
result_list <- lapply(1:length(tickers), function(x) {
tryCatch({
tmp <- getSymbols(tickers[x], from = from[x], to = to, auto.assign = F)
data.frame(date = index(tmp),
ticker = tickers[x],
open = as.numeric(Op(tmp)),
high = as.numeric(Hi(tmp)),
close = as.numeric(Cl(tmp)),
volume = as.numeric(Vo(tmp)),
adj = as.numeric(Ad(tmp))
)
}, error = function(e) {
return(NULL)
})
})
result_df <- do.call(rbind, result_list)
return(result_df)
}
getSymbolsDF(tickers[1:5], from = d[1:5,2], to = current_date)
start_date <- "2017-01-01"
my_df2 <- getSymbolsDF(tickers_new, from = start_date, to = current_date)
my_df2
my_df2$ticker
my_df2 <- getSymbolsDF(tickers_new, from = start_date, to = current_date)
my_df2 <- getSymbolsDF("AAPL", from = start_date, to = current_date)
my_df2
my_df2 <- getSymbolsDF(tickers_new, from = start_date, to = current_date)
getSymbolsDF <- function(tickers, from, to) {
result_list <- lapply(1:length(tickers), function(x) {
tryCatch({
tmp <- getSymbols(tickers[x], src = "google", from = from[x], to = to, auto.assign = F)
data.frame(date = index(tmp),
ticker = tickers[x],
open = as.numeric(Op(tmp)),
high = as.numeric(Hi(tmp)),
close = as.numeric(Cl(tmp)),
volume = as.numeric(Vo(tmp)),
adj = as.numeric(Ad(tmp))
)
}, error = function(e) {
return(NULL)
})
})
result_df <- do.call(rbind, result_list)
return(result_df)
}
my_df2 <- getSymbolsDF(tickers_new, from = start_date, to = current_date)
my_df2
getSymbolsDF <- function(tickers, from, to) {
result_list <- lapply(1:length(tickers), function(x) {
tryCatch({
tmp <- getSymbols(tickers[x], src = "google", from = from[x], to = to, auto.assign = F)
data.frame(date = index(tmp),
ticker = tickers[x],
open = as.numeric(Op(tmp)),
high = as.numeric(Hi(tmp)),
close = as.numeric(Cl(tmp)),
volume = as.numeric(Vo(tmp)),
#adj = as.numeric(Ad(tmp))
)
}, error = function(e) {
return(NULL)
})
})
result_df <- do.call(rbind, result_list)
return(result_df)
}
my_df2 <- getSymbolsDF(tickers_new, from = start_date, to = current_date)
my_df2
getSymbols(tickers[1], src = "google", from = d[1,2], to = current_date, auto.assign = F)
getSymbols("AAPL", src = "google", from = d[1,2], to = current_date, auto.assign = F)
getSymbolsDF <- function(tickers, from, to) {
result_list <- lapply(1:length(tickers), function(x) {
tryCatch({
tmp <- getSymbols(tickers[x], src = "google", from = from[x], to = to, auto.assign = F)
data.frame(date = index(tmp),
ticker = tickers[x],
open = as.numeric(Op(tmp)),
high = as.numeric(Hi(tmp)),
close = as.numeric(Cl(tmp)),
volume = as.numeric(Vo(tmp))
)
}, error = function(e) {
return(NULL)
})
})
result_df <- do.call(rbind, result_list)
return(result_df)
}
my_df2 <- getSymbolsDF(tickers_new, from = start_date, to = current_date)
my_df2
my_df2$ticker
tickers_new
getSymbolsDF("AAPL", from = start_date, to = current_date)
theInstruments = c("^GSPC",
"SPY",
"QQQ",
"DDM",
"EFA",
"EEM",
"EWJ")
for (ii in theInstruments){
print(ii)
data = getSymbols(Symbols = ii,
src = "yahoo",
from = startDate,
auto.assign = FALSE)
colnames(data) = c("open","high","low","close","volume","adj")
}
start_date
for (ii in theInstruments){
print(ii)
data = getSymbols(Symbols = ii,
src = "yahoo",
from = start_date,
auto.assign = FALSE)
colnames(data) = c("open","high","low","close","volume","adj")
}
for (ii in theInstruments){
print(ii)
data = getSymbols(Symbols = ii,
src = "yahoo",
from = start_date,
auto.assign = FALSE)
colnames(data) = c("open","high","low","close","volume","adj")
print(data)
}
my_df2 <- getSymbolsDF(tickers_new, from = start_date, to = current_date)
my_df2
for (ii in tickers_new){
print(ii)
data = getSymbols(Symbols = ii,
src = "yahoo",
from = start_date,
auto.assign = FALSE)
colnames(data) = c("open","high","low","close","volume","adj")
print(data)
}
getSymbolsDF <- function(tickers, from, to) {
result_list <- lapply(1:length(tickers), function(x) {
tmp <- getSymbols(tickers[x], from = from[x], to = to, auto.assign = F)
data.frame(date = index(tmp),
ticker = tickers[x],
open = as.numeric(Op(tmp)),
high = as.numeric(Hi(tmp)),
close = as.numeric(Cl(tmp)),
volume = as.numeric(Vo(tmp)),
adj = as.numeric(Ad(tmp))
})
result_df <- do.call(rbind, result_list)
return(result_df)
}
getSymbolsDF <- function(tickers, from, to) {
result_list <- lapply(1:length(tickers), function(x) {
tmp <- getSymbols(tickers[x], from = from[x], to = to, auto.assign = F)
data.frame(date = index(tmp),
ticker = tickers[x],
open = as.numeric(Op(tmp)),
high = as.numeric(Hi(tmp)),
close = as.numeric(Cl(tmp)),
volume = as.numeric(Vo(tmp)),
adj = as.numeric(Ad(tmp))
)
})
result_df <- do.call(rbind, result_list)
return(result_df)
}
getSymbolsDF(tickers_new, from = start_date, to = current_date)
getSymbolsDF(tickers_new[2:3], from = start_date, to = current_date)
getSymbolsDF(tickers_new[2:3], from = start_date, to = current_date)
getSymbolsDF("AAPL", from = start_date, to = current_date)
tickers_new
getSymbolsDF(tickers_new[3], from = start_date, to = current_date)
getSymbolsDF(tickers_new[2:3], from = start_date, to = current_date)
getSymbolsDF <- function(tickers, from, to) {
result_list <- lapply(1:length(tickers), function(x) {
print(tickers[x], from[x])
tmp <- getSymbols(tickers[x], from = from[x], to = to, auto.assign = F)
data.frame(date = index(tmp),
ticker = tickers[x],
open = as.numeric(Op(tmp)),
high = as.numeric(Hi(tmp)),
close = as.numeric(Cl(tmp)),
volume = as.numeric(Vo(tmp)),
adj = as.numeric(Ad(tmp))
)
})
result_df <- do.call(rbind, result_list)
return(result_df)
}
getSymbolsDF(tickers_new[2:3], from = start_date, to = current_date)
getSymbolsDF <- function(tickers, from, to) {
result_list <- lapply(1:length(tickers), function(x) {
if(length(from) > 1) {
tryCatch({
tmp <- getSymbols(tickers[x], from = from[x], to = to, auto.assign = F)
data.frame(date = index(tmp),
ticker = tickers[x],
open = as.numeric(Op(tmp)),
high = as.numeric(Hi(tmp)),
close = as.numeric(Cl(tmp)),
volume = as.numeric(Vo(tmp)),
adj = as.numeric(Ad(tmp))
)
}, error = function(e) {
return(NULL)
})
} else {
tryCatch({
tmp <- getSymbols(tickers[x], from = from, to = to, auto.assign = F)
data.frame(date = index(tmp),
ticker = tickers[x],
open = as.numeric(Op(tmp)),
high = as.numeric(Hi(tmp)),
close = as.numeric(Cl(tmp)),
volume = as.numeric(Vo(tmp)),
adj = as.numeric(Ad(tmp))
)
}, error = function(e) {
return(NULL)
})
}
})
result_df <- do.call(rbind, result_list)
return(result_df)
}
getSymbolsDF(tickers_new[2:3], from = start_date, to = current_date)
unique(getSymbolsDF(tickers_new[2:3], from = start_date, to = current_date)$ticker)
getSymbolsDF(tickers_update, from = d[,2], to = current_date)
getSymbolsDF(tickers_update[1:10], from = d[1:10,2], to = current_date)
updateTickerDates <- read.csv("ticker_by_date.csv", header=F)
my_df1 <- getSymbolsDF(tickers_update, from = updateTickerDates[,2], to = current_date)
my_df2 <- getSymbolsDF(tickers_new, from = start_date, to = current_date)
nrow(my_df1)
nrow(my_df2)
rbind(my_df1, mydf_2)
rbind(my_df1, my_df2)
mydf <- rbind(
# update existing tickers
getSymbolsDF(tickers_update, from = updateTickerDates[,2], to = current_date),
# build new tickers from 'start_date'
getSymbolsDF(tickers_new, from = start_date, to = current_date)
)
filename <- paste0(loading_dir, "/stocks_", last_date, "_-_", current_date, ".csv")
loading_dir <- "/home/joe/Dropbox/github/quantdb/loading"
filename <- paste0(loading_dir, "/stocks_", last_date, "_-_", current_date, ".csv")
filename <- paste0(loading_dir, "/stocks_", current_date, ".csv")
filename
write.csv(mydf, filename, row.names = FALSE)
loading_dir
paste0(loading_dir, "latest_stocks_dates.csv")
paste0(loading_dir, "/latest_stocks_dates.csv")
read.csv(paste0(loading_dir, "/latest_stocks_dates.csv"))
quantmod_dir="/home/joe/Dropbox/github/quantdb"
source(paste0(quantmod_dir, "/getSymbols2.R"))
paste0(quantmod_dir, "/getSymbols2.R")
source(paste0(quantmod_dir, "/R/getSymbols2.R"))
read.csv(paste0(quantmod_dir, "/loading/latest_stocks_dates.csv"), header=F)
start_date
tickers
